#!/usr/bin/python3

import argparse
import hashlib
import json
import os
import subprocess
import sys
import tempfile

def depsolve(packages, repositories, arch, info):
    req = {
        "command": "depsolve",
        "arch": arch,
        "module_platform_id": info["module_platform_id"],
        "arguments": {
            "repos": repositories,
            "transactions": [{"package-specs": packages["include"]}],
        },
        "cachedir": "/tmp/ibdc-dnf-cache",
    }

    res = subprocess.run(
        ["/usr/libexec/osbuild-depsolve-dnf"],
        check=True,
        input=json.dumps(req),
        encoding="utf8",
        stdout=subprocess.PIPE,
    )

    return json.loads(res.stdout)


def process_sets(sets):
    sources = {}
    for s in sets.values():
        for package in s:
            sources[package["checksum"]] = package["remote_location"]

    return {
        "sources": sources,
        "refs": {
            id: [p["checksum"] for p in packages] for (id, packages) in sets.items()
        },
    }


def prepare(args):
    with tempfile.TemporaryDirectory() as tmpdir:
        request = {}
        if args.request:
            with open(args.request, "r") as f:
                request = json.load(f)

        if args.version:
            request["version"] = args.version
        if args.arch:
            request["arch"] = args.arch
        if args.type:
            request["type"] = args.type

        if "version" not in request:
            raise RuntimeError("version not specified")
        if "arch" not in request:
            raise RuntimeError("arch not specified")
        if "type" not in request:
            raise RuntimeError("type not specified")
        
        if "customizations" not in request:
            request["customizations"] = {}

        request_file = os.path.join(tmpdir, "request.json")
        with open(request_file, "w") as f:
            json.dump(request, f)

        image = subprocess.run(
            [
                "jsonnet",
                "--tla-code-file",
                f"request={request_file}",
                os.path.join("def", args.type, "image.jsonnet"),
            ],
            check=True,
            encoding="utf8",
            stdout=subprocess.PIPE,
        )

        image = json.loads(image.stdout)

        if args.repositories:
            repositories = json.loads(args.repositories)
        else:
            repositories = image["repositories"]

        sets = {
            key: depsolve(packages, repositories, args.arch, image)
            for (key, packages) in image["packages"].items()
        }

        print(
            json.dumps(
                {
                    "sources": {"org.osbuild.rpm": process_sets(sets)},
                    "request": request,
                    "image": image,
                }
            )
        )


def manifest(args):
    if args.bundle == "-":
        f = sys.stdin
    else:
        f = open(args.bundle, "r")

    bundle = json.load(f)

    with tempfile.TemporaryDirectory() as tmpdir:
        bundle_file = os.path.join(tmpdir, "bundle.json")
        with open(bundle_file, "w") as f:
            json.dump(bundle, f)
        subprocess.run(
            [
                "jsonnet",
                "--tla-code-file",
                f"bundle={bundle_file}",
                os.path.join("def", bundle["request"]["type"], "manifest.jsonnet"),
            ],
            check=True,
        )


def main():
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(dest="command")

    prepare_parser = subparsers.add_parser("prepare")
    prepare_parser.add_argument(
        "--request", type=str, help="request file (optional)", required=False
    )
    prepare_parser.add_argument(
        "--type", type=str, help="type (required if not by the request file)", required=False
    )
    prepare_parser.add_argument(
        "--arch", type=str, help="arch (required if not by the request file)", required=False
    )
    prepare_parser.add_argument(
        "--version", type=str, help="distribution version  (required if not by the request file)", required=False
    )
    prepare_parser.add_argument(
        "--repositories",
        type=str,
        help="repositories (overrides the ones from the definition)",
        required=False,
    )

    manifest_parser = subparsers.add_parser("manifest")
    manifest_parser.add_argument("bundle", type=str, help="bundle (required)")

    args = parser.parse_args()

    if args.command == "prepare":
        prepare(args)
    elif args.command == "manifest":
        manifest(args)


if __name__ == "__main__":
    main()
